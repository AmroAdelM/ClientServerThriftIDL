/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef HelloService_H
#define HelloService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "hello_types.h"

namespace hello {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class HelloServiceIf {
 public:
  virtual ~HelloServiceIf() {}
  virtual void sayHello(std::string& _return, const std::string& name) = 0;
};

class HelloServiceIfFactory {
 public:
  typedef HelloServiceIf Handler;

  virtual ~HelloServiceIfFactory() {}

  virtual HelloServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(HelloServiceIf* /* handler */) = 0;
  };

class HelloServiceIfSingletonFactory : virtual public HelloServiceIfFactory {
 public:
  HelloServiceIfSingletonFactory(const ::std::shared_ptr<HelloServiceIf>& iface) : iface_(iface) {}
  virtual ~HelloServiceIfSingletonFactory() {}

  virtual HelloServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(HelloServiceIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<HelloServiceIf> iface_;
};

class HelloServiceNull : virtual public HelloServiceIf {
 public:
  virtual ~HelloServiceNull() {}
  void sayHello(std::string& /* _return */, const std::string& /* name */) override {
    return;
  }
};

typedef struct _HelloService_sayHello_args__isset {
  _HelloService_sayHello_args__isset() : name(false) {}
  bool name :1;
} _HelloService_sayHello_args__isset;

class HelloService_sayHello_args {
 public:

  HelloService_sayHello_args(const HelloService_sayHello_args&);
  HelloService_sayHello_args& operator=(const HelloService_sayHello_args&);
  HelloService_sayHello_args() noexcept
                             : name() {
  }

  virtual ~HelloService_sayHello_args() noexcept;
  std::string name;

  _HelloService_sayHello_args__isset __isset;

  void __set_name(const std::string& val);

  bool operator == (const HelloService_sayHello_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const HelloService_sayHello_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HelloService_sayHello_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HelloService_sayHello_pargs {
 public:


  virtual ~HelloService_sayHello_pargs() noexcept;
  const std::string* name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HelloService_sayHello_result__isset {
  _HelloService_sayHello_result__isset() : success(false) {}
  bool success :1;
} _HelloService_sayHello_result__isset;

class HelloService_sayHello_result {
 public:

  HelloService_sayHello_result(const HelloService_sayHello_result&);
  HelloService_sayHello_result& operator=(const HelloService_sayHello_result&);
  HelloService_sayHello_result() noexcept
                               : success() {
  }

  virtual ~HelloService_sayHello_result() noexcept;
  std::string success;

  _HelloService_sayHello_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const HelloService_sayHello_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HelloService_sayHello_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HelloService_sayHello_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HelloService_sayHello_presult__isset {
  _HelloService_sayHello_presult__isset() : success(false) {}
  bool success :1;
} _HelloService_sayHello_presult__isset;

class HelloService_sayHello_presult {
 public:


  virtual ~HelloService_sayHello_presult() noexcept;
  std::string* success;

  _HelloService_sayHello_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class HelloServiceClient : virtual public HelloServiceIf {
 public:
  HelloServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  HelloServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void sayHello(std::string& _return, const std::string& name) override;
  void send_sayHello(const std::string& name);
  void recv_sayHello(std::string& _return);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class HelloServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<HelloServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (HelloServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_sayHello(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  HelloServiceProcessor(::std::shared_ptr<HelloServiceIf> iface) :
    iface_(iface) {
    processMap_["sayHello"] = &HelloServiceProcessor::process_sayHello;
  }

  virtual ~HelloServiceProcessor() {}
};

class HelloServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  HelloServiceProcessorFactory(const ::std::shared_ptr< HelloServiceIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< HelloServiceIfFactory > handlerFactory_;
};

class HelloServiceMultiface : virtual public HelloServiceIf {
 public:
  HelloServiceMultiface(std::vector<std::shared_ptr<HelloServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~HelloServiceMultiface() {}
 protected:
  std::vector<std::shared_ptr<HelloServiceIf> > ifaces_;
  HelloServiceMultiface() {}
  void add(::std::shared_ptr<HelloServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void sayHello(std::string& _return, const std::string& name) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sayHello(_return, name);
    }
    ifaces_[i]->sayHello(_return, name);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class HelloServiceConcurrentClient : virtual public HelloServiceIf {
 public:
  HelloServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  HelloServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void sayHello(std::string& _return, const std::string& name) override;
  int32_t send_sayHello(const std::string& name);
  void recv_sayHello(std::string& _return, const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
